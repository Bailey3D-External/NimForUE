# tooling for NimForUE

import std / [os, osproc, parseopt, tables, strformat, strutils, times]
import buildscripts / [nimforueconfig, copylib, nimcachebuild]

var options: Table[string, string]

type Task = object
  name: string
  description: string
  routine: proc(options: Table[string, string]) {.nimcall.}

var tasks: seq[Task] = @[]

template task(taskName: untyped, desc: string, body: untyped): untyped =
  proc `taskName`(options: Table[string, string]) {.nimcall.} =
    let start = now()
    echo ">>>> Task: ", astToStr(taskName), " <<<<"
    body
    echo "!!>> ", astToStr(taskName), " Time: ", $(now() - start), " <<<<"
  tasks.add(Task(name: astToStr(taskName), description: desc, routine: `taskName`))


proc generateFFIGenFile*() = 
  let genFilePath = getNimForUEConfig().genFilePath
  let content = fmt"""

#AUTOGENERATED FILE. DO NOT EDIT.

import locks
import std/dynlib
import hostbase


"""
  # if nnot fileExists(genFilePath):
    
  writeFile(genFilePath, content)

task guest, "Builds the main lib. The one that makes sense to hot reload.":
    generateFFIGenFile()
    discard execCmd("nim cpp --app:lib --nomain --d:genffi -d:withue -d:withPCH --nimcache:.nimcache/nimforue src/nimforue.nim")
    copyNimForUELibToUEDir()

task guestpch, "Builds the main lib. The one that makes sense to hot reload.":
    generateFFIGenFile()

    var force = ""
    if options.contains("f"):
      force = "-f"

    discard execCmd(&"nim cpp {force} --app:lib --nomain --d:genffi -d:withue -d:withPCH --nimcache:.nimcache/nimforuepch --genscript src/nimforue.nim")
    if nimcacheBuild() == Success:
      copyNimForUELibToUEDir()

var params = commandLineParams().join(" ")
if params.len == 0:
  echo "nue: NimForUE tool"

var p = initOptParser()
for kind, key, val in p.getopt():
  case kind
  of cmdEnd: doAssert(false) # cannot happen with getopt
  of cmdShortOption, cmdLongOption:
    case key:
    of "h", "help":
      echo "Usage, Commands and Options for nue"
      quit()
    else:
      options[key] = val
  of cmdArgument:
    case key:
    of "guest":
      guest(options)
    of "guestpch":
      guestpch(options)
    else:
      echo &"Unknown argument for nue {key}"