/* Generated by Nim Compiler v1.6.10 */
#define NIM_INTBITS 64
#define NIM_EmulateOverflowChecks

#include "nimbase.h"
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
  #  define nimfr_(proc, file) \
      TFrame FR_; \
      FR_.procname = proc; FR_.filename = file; FR_.line = 0; FR_.len = 0; nimFrame(&FR_);

  #  define nimfrs_(proc, file, slots, length) \
      struct {TFrame* prev;NCSTRING procname;NI line;NCSTRING filename; NI len; VarSlot s[slots];} FR_; \
      FR_.procname = proc; FR_.filename = file; FR_.line = 0; FR_.len = length; nimFrame((TFrame*)&FR_);

  #  define nimln_(n, file) \
      FR_.line = n; FR_.filename = file;
  struct NimStrPayload;
struct NimStringV2;
struct Exception;
struct RootObj;
struct TNimTypeV2;
struct tySequence__uB9b75OUPRENsBAu4AnoePA;
struct tySequence__uB9b75OUPRENsBAu4AnoePA_Content;
struct tyObject_AssertionDefect__PtYxPmY5X0dorfvxAFbJpQ;
struct tyObject_Defect__LbeSGvgPzGzXnW9caIkJqMA;
struct tyObject_StackTraceEntry__oLyohQ7O2XOvGnflOss8EA;
struct NimStrPayload {NI cap;
NIM_CHAR data[SEQ_DECL_SIZE];
};
struct NimStringV2 {NI len;
NimStrPayload* p;
};
struct TNimTypeV2 {void* destructor;
NI size;
NI align;
NCSTRING name;
void* traceImpl;
void* typeInfoV1;
NI flags;
};
struct RootObj {TNimTypeV2* m_type;};
struct tySequence__uB9b75OUPRENsBAu4AnoePA {
  NI len; tySequence__uB9b75OUPRENsBAu4AnoePA_Content* p;
};
struct Exception : public RootObj {Exception* parent;
NCSTRING name;
NimStringV2 message;
tySequence__uB9b75OUPRENsBAu4AnoePA trace;
Exception* up;
};
struct tyObject_Defect__LbeSGvgPzGzXnW9caIkJqMA : public Exception {};
struct tyObject_AssertionDefect__PtYxPmY5X0dorfvxAFbJpQ : public tyObject_Defect__LbeSGvgPzGzXnW9caIkJqMA {};
struct tyObject_StackTraceEntry__oLyohQ7O2XOvGnflOss8EA {NCSTRING procname;
NI line;
NCSTRING filename;
};


#ifndef tySequence__uB9b75OUPRENsBAu4AnoePA_Content_PP
#define tySequence__uB9b75OUPRENsBAu4AnoePA_Content_PP
struct tySequence__uB9b75OUPRENsBAu4AnoePA_Content { NI cap; tyObject_StackTraceEntry__oLyohQ7O2XOvGnflOss8EA data[SEQ_DECL_SIZE];};
#endif

      N_LIB_PRIVATE N_NOINLINE(void, raiseAssert__systemZassertions_23)(NimStringV2 msg);
static N_INLINE(void, sysFatal__systemZassertions_25)(NimStringV2 message);
N_LIB_PRIVATE N_NIMCALL(void*, nimNewObj)(NI size, NI alignment);
N_LIB_PRIVATE N_NIMCALL(void, eqdestroy___system_3276)(NimStringV2& dest);
N_LIB_PRIVATE N_NIMCALL(void, raiseExceptionEx)(Exception* e, NCSTRING ename, NCSTRING procname, NCSTRING filename, NI line);
static N_INLINE(void, nimFrame)(TFrame* s);
N_LIB_PRIVATE N_NOINLINE(void, callDepthLimitReached__system_4399)(void);
static N_INLINE(void, popFrame)(void);
N_LIB_PRIVATE N_NIMCALL(void, eqcopy___system_3279)(NimStringV2& dest, NimStringV2 src);
extern TNimTypeV2 NTIv2__PtYxPmY5X0dorfvxAFbJpQ_;
extern TFrame* framePtr__system_3905;
extern TFrame* framePtr__system_3905;
extern TFrame* framePtr__system_3905;
extern TFrame* framePtr__system_3905;
extern TFrame* framePtr__system_3905;
extern TFrame* framePtr__system_3905;

#line 549 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"
static N_INLINE(void, nimFrame)(TFrame* s) {
#line 550 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"
	{
#line 550 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"
		if (!(framePtr__system_3905 == ((TFrame*) NIM_NIL))) goto LA3_;
{
#line 551 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"
		(*s).calldepth = ((NI16) 0);}	}
	goto LA1_;
	LA3_: ;
	{
#line 554 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"

#line 554 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"
		(*s).calldepth = (NI16)((*framePtr__system_3905).calldepth + ((NI16) 1));	}
	LA1_: ;

#line 556 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"
	(*s).prev = framePtr__system_3905;
#line 557 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"
	framePtr__system_3905 = s;
#line 558 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"
	{
#line 558 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"
		if (!((*s).calldepth == ((NI16) 2000))) goto LA8_;
{
#line 558 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"

#line 558 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"
		callDepthLimitReached__system_4399();
}	}
	LA8_: ;
}

#line 99 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"
static N_INLINE(void, popFrame)(void) {
#line 100 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\excpt.nim"
	framePtr__system_3905 = (*framePtr__system_3905).prev;}

#line 53 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim"
static N_INLINE(void, sysFatal__systemZassertions_25)(NimStringV2 message) {	tyObject_AssertionDefect__PtYxPmY5X0dorfvxAFbJpQ* T1_;	NimStringV2 blitTmp;	nimfr_("sysFatal", "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim");
#line 54 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim"
	nimln_(54, "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim");	T1_ = NIM_NIL;	T1_ = (tyObject_AssertionDefect__PtYxPmY5X0dorfvxAFbJpQ*) nimNewObj(sizeof(tyObject_AssertionDefect__PtYxPmY5X0dorfvxAFbJpQ), NIM_ALIGNOF(tyObject_AssertionDefect__PtYxPmY5X0dorfvxAFbJpQ));	(*T1_).m_type = (&NTIv2__PtYxPmY5X0dorfvxAFbJpQ_);	(*T1_).name = "AssertionDefect";
#line 54 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim"
	blitTmp = message;
#line 54 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim"
	message.len = 0; message.p = NIM_NIL;	(*T1_).message = blitTmp;	{
#line 54 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim"

#line 54 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim"
		eqdestroy___system_3276(message);
	}

#line 54 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim"
	raiseExceptionEx((Exception*)T1_, "AssertionDefect", "sysFatal", "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim", 54);	{	}
	{
#line 54 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim"

#line 54 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim"
		eqdestroy___system_3276(message);
	}
	popFrame();}

#line 26 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\assertions.nim"
N_LIB_PRIVATE N_NOINLINE(void, raiseAssert__systemZassertions_23)(NimStringV2 msg) {	NimStringV2 colontmpD_;	nimfr_("raiseAssert", "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\assertions.nim");	colontmpD_.len = 0; colontmpD_.p = NIM_NIL;
#line 28 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\assertions.nim"
	nimln_(28, "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\assertions.nim");
#line 28 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\assertions.nim"
	colontmpD_.len = 0; colontmpD_.p = NIM_NIL;
#line 54 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim"
	nimln_(54, "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim");
#line 54 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\fatal.nim"
	eqcopy___system_3279(colontmpD_, msg);

#line 28 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\assertions.nim"
	nimln_(28, "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\assertions.nim");	sysFatal__systemZassertions_25(colontmpD_);
	popFrame();}

#line 30 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\assertions.nim"
N_LIB_PRIVATE N_NIMCALL(void, failedAssertImpl__systemZassertions_66)(NimStringV2 msg) {	nimfr_("failedAssertImpl", "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\assertions.nim");
#line 38 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\assertions.nim"
	nimln_(38, "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\assertions.nim");
#line 38 "C:\\Users\\juama\\NimSources\\Nim\\lib\\system\\assertions.nim"
	raiseAssert__systemZassertions_23(msg);
	popFrame();}
